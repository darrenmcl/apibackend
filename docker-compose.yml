# /var/projects/backend-api/docker-compose.yml
version: "3.8"

services:
  # --- RabbitMQ Service ---
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_HOST_PORT:-5672}:5672"
      - "${RABBITMQ_MGMT_HOST_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS_RAW:-PCPLm4hnigq#2025} # RabbitMQ server uses the raw password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- PostgreSQL Database Service ---
  pgvector-db:
    image: pgvector/pgvector:pg16
    container_name: pgvector-db
    ports:
      - "${POSTGRES_HOST_EXPOSED_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Main Backend API ---
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend-api
    ports:
      - "${BACKEND_API_HOST_PORT:-3012}:3012"
    environment:
      # Database Settings
      DB_HOST: ${POSTGRES_HOST_FOR_APPS:-pgvector-db}
      DB_PORT: ${POSTGRES_SERVICE_PORT:-5432}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
      # RabbitMQ Connection URL (ensure your backend-api script uses AMQP_URL)
      AMQP_URL: ${AMQP_URL:-amqp://admin:PCPLm4hnigq%232025@rabbitmq:5672} # Note %23 for #
      # General AWS access (using primary AWS credentials)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY} # If backend also needs this
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      pgvector-db:
        condition: service_healthy
    restart: unless-stopped

  # --- Chat Worker ---
  # (Uses email-specific AWS credentials for SES and uses AMQP_URL)
  chat-worker:
    build:
      context: ./chat-worker
      dockerfile: Dockerfile
    container_name: chat-worker
    environment:
      # Database Settings
      DB_HOST: ${POSTGRES_HOST_FOR_APPS:-pgvector-db}
      DB_PORT: ${POSTGRES_SERVICE_PORT:-5432}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
      # RabbitMQ Connection URL (ensure your chat-worker script uses AMQP_URL)
      AMQP_URL: ${AMQP_URL:-amqp://admin:PCPLm4hnigq%232025@rabbitmq:5672}
      # AWS and Email specific variables (using email-specific credentials)
      AWS_REGION: ${EMAIL_AWS_REGION:-us-west-2}
      AWS_ACCESS_KEY_ID: ${EMAIL_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${EMAIL_AWS_SECRET_ACCESS_KEY}
      ALERT_FROM_EMAIL: ${ALERT_FROM_EMAIL}
      ALERT_TO_EMAIL: ${ALERT_TO_EMAIL}
      # OpenRouter/OpenAI API Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      OPENROUTER_MODEL: ${OPENROUTER_MODEL:-gpt-3.5-turbo}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./chat-worker:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      pgvector-db:
        condition: service_healthy
    restart: unless-stopped

  # --- Email Consumer ---
  # (Uses email-specific AWS credentials for SES and uses AMQP_URL)
  email-consumer:
    build:
      context: ./email # Assuming code is in ./email directory
      dockerfile: Dockerfile
    container_name: email-consumer
    environment:
      # DB_HOST: ${POSTGRES_HOST_FOR_APPS:-pgvector-db} # Uncomment if it needs DB
      # DB_PORT: ${POSTGRES_SERVICE_PORT:-5432}
      # DB_USER: ${POSTGRES_USER:-postgres}
      # DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # DB_NAME: ${POSTGRES_DB:-postgres}
      # RabbitMQ Connection URL (ensure your email-consumer script uses AMQP_URL)
      AMQP_URL: ${AMQP_URL:-amqp://admin:PCPLm4hnigq%232025@rabbitmq:5672}
      # AWS and Email specific variables (using email-specific credentials)
      AWS_REGION: ${EMAIL_AWS_REGION:-us-west-2}
      AWS_ACCESS_KEY_ID: ${EMAIL_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${EMAIL_AWS_SECRET_ACCESS_KEY}
      ALERT_FROM_EMAIL: ${ALERT_FROM_EMAIL}
      ALERT_TO_EMAIL: ${ALERT_TO_EMAIL}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./email:/usr/src/app # Mounts the ./email directory
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      # pgvector-db: # Uncomment if it needs DB
      #   condition: service_healthy
    restart: unless-stopped
    command: node emailConsumer.js # Or your main script name

  # --- LLM Report Worker ---
  llm-report-worker:
    build:
      context: ./llm-report-worker
      dockerfile: Dockerfile
    container_name: llm-report-worker
    environment:
      # Database Settings
      DB_HOST: ${POSTGRES_HOST_FOR_APPS:-pgvector-db}
      DB_PORT: ${POSTGRES_SERVICE_PORT:-5432}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
      # RabbitMQ Settings (for its specific worker.js that uses individual params)
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_SERVICE_PORT:-5672} # Using RABBITMQ_SERVICE_PORT from .env
      RABBITMQ_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_PASS: ${RABBITMQ_PASS_RAW:-PCPLm4hnigq#2025} # Uses raw password
      # AWS Credentials & S3 Configuration (using general AWS credentials)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      # Worker Queue
      WORKER_QUEUE: ${WORKER_QUEUE:-llm_report_jobs}
      # LLM API Key (ensure callLLM.js in this worker uses this variable)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./llm-report-worker:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      pgvector-db:
        condition: service_healthy
    restart: unless-stopped

# --- Define a custom network ---
networks:
  default:
    name: backend-network
    driver: bridge

# --- Named Volumes ---
volumes:
  rabbitmq_data:
  postgres_data:
