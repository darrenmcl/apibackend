# /var/projects/backend-api/docker-compose.yml
# --- REVISED with Different PostgreSQL Port ---

version: "3.8"

services:
  # --- RabbitMQ Service ---
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MGMT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-PCPLm4hnigq#2025}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # --- PostgreSQL Database Service ---
  pgvector-db:
    image: pgvector/pgvector:pg16
    container_name: pgvector-db
    ports:
      - "${POSTGRES_PORT:-5433}:5432" # FIXED: Use 5433 on host, 5432 in container
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Main Backend API ---
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend-api
    ports:
      - "${BACKEND_PORT:-3012}:3012"
    env_file:
      - ./.env
    environment:
      # DB settings - use pgvector-db service name
      DB_HOST: pgvector-db
      DB_PORT: 5432 # Container internal port
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
         condition: service_healthy
      pgvector-db:
         condition: service_healthy
    restart: unless-stopped

  # --- Chat Worker ---
  chat-worker:
    build:
      context: ./chat-worker
      dockerfile: Dockerfile
    container_name: chat-worker
    env_file:
       - ./chat-worker/.env
    environment:
      DB_HOST: pgvector-db
      DB_PORT: 5432 # Container internal port
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
    volumes:
       - ./chat-worker:/usr/src/app
       - /usr/src/app/node_modules
    depends_on:
       rabbitmq:
          condition: service_healthy
       pgvector-db:
          condition: service_healthy
    restart: unless-stopped

  # --- Email Consumer ---
  email-consumer:
    build:
      context: .
      dockerfile: ./email/Dockerfile
    container_name: email-consumer
    env_file:
      - ./email/.env
    environment:
      DB_HOST: pgvector-db
      DB_PORT: 5432 # Container internal port
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      pgvector-db:
        condition: service_healthy
    restart: unless-stopped
    command: node email/emailConsumer.js

  # --- LLM Report Worker ---
  llm-report-worker:
    build:
      context: ./llm-report-worker
      dockerfile: Dockerfile
    container_name: llm-report-worker
    env_file:
      - ./llm-report-worker/.env
    environment:
      DB_HOST: pgvector-db
      DB_PORT: 5432 # Container internal port
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: ${POSTGRES_DB:-postgres}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    volumes:
      - ./llm-report-worker:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      pgvector-db:
        condition: service_healthy
    restart: unless-stopped

# --- Define a custom network ---
networks:
  default:
    name: backend-network
    driver: bridge

# --- Named Volumes ---
volumes:
  rabbitmq_data:
  postgres_data:
